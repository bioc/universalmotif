- Do the read/write_motifs() functions work with the gap slots?
- Still need to rework compare_motifs() p-values
- Scan for motif clusters
- Check that everything in convert_motifs() still works
- Check that all read/write_*() functions still work
- Add tests
- Visualisation of scan_sequences()/enrich_motifs()
- Work on Rmd output of compare_motifs()
- motif_peaks(): compare two sets of sequences (enrichment analysis)
- motif_peaks(): serious code cleanup needed
- dependencies to consider removing:
    + !! yaml (write my own parser, doesn't matter if it's slow)
    + Rcpp (use cpp11 w/o import instead --> maybe consider once it hits 1.0.0)
- Add an optional list type which can be used by various universalmotif functions
    + universalmotifList
    + Can do vectorized operations such as subset all names with `[`
    + control printing:
        class(mylist) <- c("universalmotifDF", "data.frame")
        print.universalmotifDF <- function(x) ...
- Remove some of the input parameter checking in merge_motifs()/view_motifs()/
  motif_tree(), rely solely on compare_motifs()
- in read_*() files, check to input file exists
- scan_sequences(): add option to return GRanges object?
- scan_sequences(): return a Biostring Views object?
- change internal motif precision limit from 1e-3 to 1e-6 (will require changes
  to how allow.nonfinite works)
- add a vignette section about pseudocounts and how the functions interact with
  them
- small meme p-values solution: keep the pval/qval/eval slots as log-transformed,
  un-log for print and `[` methods?
- get_bkg(): rewrite so that all window code is in c++ (like in sequence-utils)
- de novo motifs:
    + first search 4/5/6/7/8-mers for enrichment differences (either
      against background or statistically expected based on 1/2/3-let frequencies)
    + then for significantly enriched k-mers, start changing PWM positions to
      see if that increases significance/enrichment OR start merging enriched
      k-mers? (fast version: only k-mer merging?)
    + for every enriched k-mer, scan with a logodds threshold of 0 -- look
      for enrichment of lower score hits?
    + finally extend motif until desired length
    + trim useless edges
- is the MEME E/p-value log10 or natural log?
- let switch_alph() be used to change to arbitrary alphabets (but keep default
  behaviour consistent with previous version!)
- can motif_pvalue() sometimes return the incorrect p-value when the provided
  score is also the max possible score? (maybe something to do with rounding)
- time for another make_DBscores() re-write I think
- really time to be getting around to writing a universalmotifList container
    + still allow all input types, including lists, just immediately always
      convert to universalmotifList
    + it behaves exactly the same way as a regular list; only difference is
      that it allows me to do more checks for groups of motifs at a time
- need a function which can allow for motifs with different background freqs
   to be comparable: maybe something like PPM --> PWM (change background) PWM
   --> PPM?
- view_motifs(show.positions.once = FALSE): actually show proper per-motif
  positions, not just numbering all columns
- create_motif(): is there a check for the "type" input?
    + why does create_motif(type="asdf") work?
- read_*(): allow to set pseudocount
- warnings in tests
- make n^k protection in motif_pvalue() optional
- make sure no errors are possible inside c++ code -- can lead to memory leaks
  since c++/R may not communicate properly about what needs to be freed
- new view_logo() example idea: show how to plot A->C mutation change (need to
  add arrows to fontDFroboto)
- create_motif(add.multifreq = 2) doesn't work!
- weird error: create_motif("A", alphabet = "AB")
- read_matrix(): make it so that it's possible to read all other formats with
  it via tweaking parsing options
- go through vignettes again
- use NULL instead of missing for optional args
- compare_and_merge()? --> this needs to be higher priority
- improve workflow to get from compare_motifs() --> merge_motifs()
  + universalmotif_df structure may help here
  + get compare_motifs() result; filter to rows you like and want to get merged
    motifs from
  + then get subject vs target dataframe
    + data.frame(A = I(motifs[res$subject.i]), B = I(motifs[res$target.i]))
  + then do row-wise merge
- get rid of DataFrame and just go pure data.frame? (store metadata in attributes?)
- better manipulation of alphabet slot
- stop this from workign? motif["name"] <- NA
- motif_pvalue() vignette bit: explain why exact calculations dont give exact
  results (rounding to three digits for use as ints)
- some typos in introduction to sequence motifs vignette, add max() to IC fun
- filter_motifs() example in vignette: nsites column returning NAs?
- weird interaction:
  + mydf %>% dplyr::rname(name = altname, altname = name) %>% to_list()
  + if altname was blank, this causes "0" to be filled in the name slot
- do I ever respect the strand option in motifs? Should I? If not, maybe make
  it clear it's purely cosmetic somewhere (also does motif_rc change the strand?)
- scan_sequences() and large datasets: spends a LOT of time in pre- and
  post-processing... need to optimize this. The actual scanning is quite fast
  even with billions of letters.
- create a new metric which tells us how specific/wobbly a motif is; could
   perhaps be used as a guide during motif merging? (ie don't want to merge
   too much and create an overly disambiguous motif)
- create_motif("RYMRMVATGGC") --> what's up with Y?
- merge_motifs() 2nd example: also plot submotifs
- make sure window size can't be set too low (shuffle_sequences, get_bkg)
- motif_score(create_motif("ATCGTACGTG"), 0, allow.nonfinite = TRUE) --> broken?
- motif_score(create_motif("ATCGTACGTG"), c(100:0 * -1, 1:20)) --> segfault
